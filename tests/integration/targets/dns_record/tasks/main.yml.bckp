---
# TODO: add tests

# Define the module defaults
- module_defaults:
    group/infoblox.bloxone.all:
      csp_url: "{{ csp_url }}"
      api_key: "{{ api_key }}"

  block:
    # Create an A record with a random name to avoid conflicts
    - ansible.builtin.set_fact:
        #fqdn: "test-auth-zone-{{ 999999 | random | string }}.com."
        record_name: "test-aaaa-record-{{ 999999 | random | string }}"

    - name: Create an AAAA record (check mode)
      infoblox.bloxone.dns_record:
        zone: "{{ _auth_zone.id }}"
        name_in_zone: "{{ record_name }}"
        type: "AAAA"
        rdata:
          address: "2001:db8::1"
        state: "present"
      check_mode: true
      register: aaaa_record

    - name: Get the AAAA record
      infoblox.bloxone.dns_record_info:
        filters:
          name_in_zone: "{{ record_name }}"
          type: AAAA
      register: aaaa_record_info

    - assert:
        that:
            - aaaa_record is changed
            - aaaa_record is not failed
            - aaaa_record_info.objects | length == 0

    - name: Create an AAAA record
      infoblox.bloxone.dns_record:
        zone: "{{ _auth_zone.id }}"
        name_in_zone: "{{ record_name }}"
        type: "AAAA"
        rdata:
          address: "2001:db8::1"
        state: "present"
      register: aaaa_record


    - name: Get the AAAA record
      infoblox.bloxone.dns_record_info:
          filters:
            name_in_zone: "{{ record_name }}"
            type: "AAAA"
      register: aaaa_record_info

    - assert:
        that:
          - aaaa_record is not failed
          - aaaa_record_info.objects | length == 1
          - aaaa_record_info.objects[0].rdata.address == "2001:db8::1"

    - name: Create an AAAA record (idempotent)
      infoblox.bloxone.dns_record:
        zone: "{{ _auth_zone.id }}"
        name_in_zone: "{{ record_name }}"
        type: "AAAA"
        rdata:
          address: "2001:db8::1"
        state: "present"
      register: aaaa_record

    - name: Get the AAAA record
      infoblox.bloxone.dns_record_info:
          filters:
            name_in_zone: "{{ record_name }}"
            type: "AAAA"
      register: aaaa_record_info

    - assert:
        that:
          - aaaa_record is not changed
          - aaaa_record is not failed
          - aaaa_record_info.objects | length == 1
          - aaaa_record_info.objects[0].rdata.address == "2001:db8::1"

# Update the AAAA Record (check mode)
    - name: Update the AAAA Record (check mode)
      infoblox.bloxone.dns_record:
        zone: "{{ _auth_zone.id }}"
        name_in_zone: "{{ record_name }}"
        rdata:
          address: "2001:db8::2"
        type: AAAA
        state: present
      check_mode: true
      register: aaaa_record_check

    # Update the AAAA Record
    - name: Update the AAAA Record
      infoblox.bloxone.dns_record:
        name_in_zone: "{{ record_name }}"
        zone: "{{ _auth_zone.id }}"
        rdata:
          address: "2001:db8::2"
        comment: "Updated AAAA Record"
        type: AAAA
        state: "present"
      register: aaaa_record

    - name: Get information about the AAAA Record
      infoblox.bloxone.dns_record_info:
        filters:
          name_in_zone: "{{ record_name }}"
          type: AAAA
      register: aaaa_record_info

    - assert:
        that:
          - not aaaa_record.failed
          - aaaa_record_info.objects | length == 1
          - aaaa_record_info.objects[0].id == aaaa_record.id
          - aaaa_record_info.objects[0].rdata.address == aaaa_record.object.rdata.address

    # Update AAAA Record (idempotency check)
    - name: Update AAAA Record is idempotent
      infoblox.bloxone.dns_record:
        name_in_zone: "{{ record_name }}"
        zone: "{{ _auth_zone.id }}"
        rdata:
          address: "2001:db8::2"
        comment: "Updated AAAA Record"
        type: AAAA
        state: "present"
      register: aaaa_record_update_idempotent

    - name: Get information about the AAAA Record (idempotent)
      infoblox.bloxone.dns_record_info:
        filters:
          name_in_zone: "{{ record_name }}"
          type: AAAA
      register: aaaa_record_info_idempotent

    - assert:
        that:
          - not aaaa_record_update_idempotent.changed
          - not aaaa_record_update_idempotent.failed
          - aaaa_record_info_idempotent.objects | length == 1

    # Delete the AAAA Record (check mode)
    - name: Delete the AAAA Record (check mode)
      infoblox.bloxone.dns_record:
        zone: "{{ _auth_zone.id }}"
        name_in_zone: "{{ record_name }}"
        rdata:
          address: "2001:db8::2"
        type: AAAA
        state: absent
      check_mode: true
      register: aaaa_record_check

    - name: Get information about the AAAA Record in check mode
      infoblox.bloxone.dns_record_info:
        filters:
          name_in_zone: "{{ record_name }}"
          type: AAAA
      register: aaaa_record_info_check

    - assert:
        that:
          - aaaa_record_check.changed
          - not aaaa_record_check.failed
          - aaaa_record_info_check.objects | length == 1

    # Delete the AAAA Record
    - name: Delete the AAAA Record
      infoblox.bloxone.dns_record:
        zone: "{{ _auth_zone.id }}"
        name_in_zone: "{{ record_name }}"
        rdata:
          address: "2001:db8::2"
        type: AAAA
        state: absent
      register: aaaa_record

    - name: Verify the AAAA Record deletion
      infoblox.bloxone.dns_record_info:
        filters:
          name_in_zone: "{{ record_name }}"
          type: AAAA
      register: aaaa_record_info

    - assert:
        that:
          - not aaaa_record.failed
          - aaaa_record_info.objects | length == 0

    # Delete the AAAA Record (idempotency check)
    - name: Delete the AAAA Record again (idempotency check)
      infoblox.bloxone.dns_record:
        zone: "{{ _auth_zone.id }}"
        name_in_zone: "{{ record_name }}"
        rdata:
          address: "2001:db8::2"
        type: AAAA
        state: absent
      register: aaaa_record_idempotent

    - name: Verify the AAAA Record deletion (idempotency check)
      infoblox.bloxone.dns_record_info:
        filters:
          name_in_zone: "{{ record_name }}"
          type: AAAA
      register: aaaa_record_info_idempotent

    - assert:
        that:
          - not aaaa_record_idempotent.failed
          - aaaa_record_info_idempotent.objects | length == 0

    # Plays encompassing various attributes of the resource
    - name: Create DNS AAAA Record with comment
      infoblox.bloxone.dns_record:
        name_in_zone: "{{ record_name }}"
        zone: "{{ _auth_zone.id }}"
        rdata:
          address: "2001:db8::3"
        type: AAAA
        comment: "This is a test AAAA Record"
        state: present
      register: aaaa_record

    - name: Get information about the AAAA Record with comment
      infoblox.bloxone.dns_record_info:
        filters:
          name_in_zone: "{{ record_name }}"
          type: AAAA
      register: aaaa_record_info

    - assert:
        that:
          - not aaaa_record.failed
          - aaaa_record_info.objects | length == 1
          - aaaa_record_info.objects[0].id == aaaa_record.id
          - aaaa_record_info.objects[0].comment == "This is a test AAAA Record"

    - name: Create DNS AAAA Record with TTL
      infoblox.bloxone.dns_record:
        name_in_zone: "{{ record_name }}"
        zone: "{{ _auth_zone.id }}"
        rdata:
          address: "2001:db8::3"
        type: AAAA
        ttl: 3600
        state: present
      register: aaaa_record_with_ttl

    - name: Get information about the AAAA Record with TTL
      infoblox.bloxone.dns_record_info:
        filters:
          name_in_zone: "{{ record_name }}"
          type: AAAA
      register: aaaa_record_info_with_ttl

    - assert:
        that:
          - not aaaa_record_with_ttl.failed
          - aaaa_record_info_with_ttl.objects | length == 1
          - aaaa_record_info_with_ttl.objects[0].id == aaaa_record_with_ttl.id
          - aaaa_record_info_with_ttl.objects[0].ttl == 3600

    - name: Create DNS AAAA Record with Disabled
      infoblox.bloxone.dns_record:
        name_in_zone: "{{ record_name }}"
        zone: "{{ _auth_zone.id }}"
        rdata:
          address: "2001:db8::3"
        type: AAAA
        disabled: true
        state: present
      register: aaaa_record_disabled

    - name: Get information about the AAAA Record with Disabled
      infoblox.bloxone.dns_record_info:
        filters:
          name_in_zone: "{{ record_name }}"
          type: AAAA
      register: aaaa_record_info_disabled

    - assert:
        that:
          - not aaaa_record_disabled.failed
          - aaaa_record_info_disabled.objects | length == 1
          - aaaa_record_info_disabled.objects[0].id == aaaa_record_disabled.id
          - aaaa_record_info_disabled.objects[0].disabled == true

    - name: Create DNS AAAA Record with Tags
      infoblox.bloxone.dns_record:
        name_in_zone: "{{ record_name }}"
        zone: "{{ _auth_zone.id }}"
        rdata:
          address: "2001:db8::3"
        type: AAAA
        tags:
          location: "site-1"
        state: present
      register: aaaa_record_with_tags

    - name: Get information about the AAAA Record with Tags
      infoblox.bloxone.dns_record_info:
        filters:
          name_in_zone: "{{ record_name }}"
          type: AAAA
      register: aaaa_record_info_with_tags

    - assert:
        that:
          - not aaaa_record_with_tags.failed
          - aaaa_record_info_with_tags.objects | length == 1
          - aaaa_record_info_with_tags.objects[0].id == aaaa_record_with_tags.id
          - aaaa_record_info_with_tags.objects[0].tags.location == "site-1"

    - name: Create DNS AAAA Record with Inheritance Options
      infoblox.bloxone.dns_record:
        name_in_zone: "{{ record_name }}"
        zone: "{{ _auth_zone.id }}"
        rdata:
          address: "2001:db8::3"
        type: AAAA
        inheritance_sources:
          ttl:
            action: "inherit"
        state: present
      register: aaaa_record_with_inheritance

    - name: Get DNS AAAA Record information
      infoblox.bloxone.dns_record_info:
        filters:
          name_in_zone: "{{ record_name }}"
          type: AAAA
      register: aaaa_record_info_with_inheritance

    - assert:
        that:
          - not aaaa_record_with_inheritance.failed
          - aaaa_record_info_with_inheritance.objects | length == 1
          - aaaa_record_info_with_inheritance.objects[0].id == aaaa_record_with_inheritance.id
          - aaaa_record_info_with_inheritance.objects[0].inheritance_sources.ttl.action == "inherit"

    - name: Create Reverse Mapping Zone for IPv6
      infoblox.bloxone.dns_auth_zone:
        fqdn: "1.0.0.0.0.0.0.0.0.0.0.0.8.b.d.0.1.0.0.3.ip6.arpa."
        primary_type: cloud
        state: present
      register: rmz_ipv6

    - name: Create DNS AAAA Record with Options
      infoblox.bloxone.dns_record:
        name_in_zone: "{{ record_name }}"
        zone: "{{ _auth_zone.id }}"
        rdata:
            address: "3001:db8::1"
        type: AAAA
        options:
          create_ptr: true
          check_rmz : true
        state: present
      register: aaaa_record_with_options

    - name: Get DNS AAAA Record information
      infoblox.bloxone.dns_record_info:
        filters:
          name_in_zone: "{{ record_name }}"
          type: AAAA
      register: aaaa_record_info_with_options

    - assert:
        that:
            - not aaaa_record_with_options.failed
            - aaaa_record_info_with_options.objects | length == 1
            - aaaa_record_info_with_options.objects[0].id == aaaa_record_with_options.id
            - aaaa_record_info_with_options.objects[0].options.create_ptr == true
            - aaaa_record_info_with_options.objects[0].options.check_rmz == true


  always:
     - name: "Clean up Authorization Zone"
       infoblox.bloxone.dns_auth_zone:
         fqdn: "{{ fqdn }}"
         state: absent
       ignore_errors: true

     - name: "Clean up DNS View"
       infoblox.bloxone.dns_view:
         name: "{{ _view.id }}"
         state: absent
       ignore_errors: true
