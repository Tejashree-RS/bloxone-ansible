---
- module_defaults:
    group/infoblox.bloxone.all:
      csp_url: "{{ csp_url }}"
      api_key: "{{ api_key }}"

  block:
    # Create a random NS record name to avoid conflicts
    - ansible.builtin.set_fact:
        record_name: "test-ns-record-{{ 999999 | random | string }}"
        tag_value: "site-{{ 999999 | random | string }}"

    # Basic Test for NS Record
    - name: Create an NS Record
      infoblox.bloxone.dns_record:
        name_in_zone: "{{ record_name }}"
        zone: "{{ _auth_zone.id }}"
        rdata:
          nsdname: "ns.example.com."
        type: "NS"
        tags:
          location: "{{ tag_value }}"
        state: present
      register: ns_record

    - name: Get NS Record information
      infoblox.bloxone.dns_record_info:
        filters:
          name_in_zone: "{{ record_name }}"
          zone: "{{ _auth_zone.id }}"
          type: "NS"
      register: ns_record_info
    - assert:
        that:
          - ns_record_info.objects | length == 1
          - ns_record_info.objects[0].id == ns_record.id

    - name: Get NS Record information by raw filter query
      infoblox.bloxone.dns_record_info:
        filter_query: "name_in_zone=='{{ record_name }}' and zone=='{{ _auth_zone.id }}' and type=='NS'"
    - assert:
        that:
          - ns_record_info.objects | length == 1
          - ns_record_info.objects[0].id == ns_record.id

    - name: Get NS Record information by filters (zone)
      infoblox.bloxone.dns_record_info:
        filters:
          zone: "{{ _auth_zone.id }}"
          type: "NS"
      register: ns_record_info
    - assert:
        that:
          - ns_record_info.objects | length == 1
          - ns_record_info.objects[0].id == ns_record.id

    - name: Get NS Record information by raw filter query
      infoblox.bloxone.dns_record_info:
        filter_query: "zone=='{{ _auth_zone.id }}' and type=='NS'"
      register: ns_record_info
    - assert:
        that:
          - ns_record_info.objects | length == 1
          - ns_record_info.objects[0].id == ns_record.id

    - name: Get NS Record information by tag filters
      infoblox.bloxone.dns_record_info:
        tag_filters:
          location: "{{ tag_value }}"
    - assert:
        that:
          - ns_record_info.objects | length == 1
          - ns_record_info.objects[0].id == ns_record.id

  always:
    # Cleanup if the test fails
    - name: "Delete NS Record"
      infoblox.bloxone.dns_record:
        name_in_zone: "{{ record_name }}"
        zone: "{{ _auth_zone.id }}"
        rdata:
            nsdname: "ns.example.com."
        type: "NS"
        state: "absent"
      ignore_errors: true

    - name: "Delete Auth Zone"
      ansible.builtin.include_role:
       name: setup_auth_zone
       tasks_from: cleanup.yml

    - name: "Delete the View"
      ansible.builtin.include_role:
       name: setup_view
       tasks_from: cleanup.yml
